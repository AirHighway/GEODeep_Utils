from osgeo import gdal
import numpy as np
import os
from glob import glob
from math import ceil
import time


# 单波段带坐标的tif图像拼接
# 这个真的很好用
# 如果需要拼接多波段，请修改代码为多波段的写入写出
# https://zhuanlan.zhihu.com/p/268191561


def GetExtent(infile):
    ds = gdal.Open(infile)
    geotrans = ds.GetGeoTransform()
    xsize = ds.RasterXSize
    ysize = ds.RasterYSize
    min_x, max_y = geotrans[0], geotrans[3]
    max_x, min_y = geotrans[0] + xsize * geotrans[1], geotrans[3] + ysize * geotrans[5]
    ds = None
    return min_x, max_y, max_x, min_y


def RasterMosaic(file_list, outpath):
    Open = gdal.Open
    min_x, max_y, max_x, min_y = GetExtent(file_list[0])
    for infile in file_list:
        minx, maxy, maxx, miny = GetExtent(infile)
        min_x, min_y = min(min_x, minx), min(min_y, miny)
        max_x, max_y = max(max_x, maxx), max(max_y, maxy)

    in_ds = Open(file_list[0])
    in_band = in_ds.GetRasterBand(1)
    geotrans = list(in_ds.GetGeoTransform())
    width, height = geotrans[1], geotrans[5]
    columns = ceil((max_x - min_x) / width)  # 列数
    rows = ceil((max_y - min_y) / (-height))  # 行数

    outfile = outpath + file_list[0][:4] + '.tif'  # 结果文件名，可自行修改
    driver = gdal.GetDriverByName('GTiff')
    out_ds = driver.Create(outfile, columns, rows, 1, in_band.DataType)
    out_ds.SetProjection(in_ds.GetProjection())
    geotrans[0] = min_x  # 更正左上角坐标
    geotrans[3] = max_y
    out_ds.SetGeoTransform(geotrans)
    out_band = out_ds.GetRasterBand(1)
    inv_geotrans = gdal.InvGeoTransform(geotrans)

    for in_fn in file_list:
        in_ds = Open(in_fn)
        in_gt = in_ds.GetGeoTransform()
        offset = gdal.ApplyGeoTransform(inv_geotrans, in_gt[0], in_gt[3])
        x, y = map(int, offset)

        data = in_ds.GetRasterBand(1).ReadAsArray()
        out_band.WriteArray(data, x, y)  # x，y是开始写入时左上角像元行列号
    del in_ds, out_band, out_ds
    return outfile


def compress(path, target_path, method="LZW"):  #
    """使用gdal进行文件压缩，
          LZW方法属于无损压缩，
          效果非常给力，4G大小的数据压缩后只有三十多M"""
    dataset = gdal.Open(path)
    driver = gdal.GetDriverByName('GTiff')
    driver.CreateCopy(target_path, dataset, strict=1, options=["TILED=YES", "COMPRESS={0}".format(method)])
    del dataset


if __name__ == '__main__':
    path = r"D:\_personSelf\_heao\SenseEarth2020-ChangeDetection-master\outdir\masks\test\im2_coor"  # 该文件夹下存放了待拼接的栅格
    os.chdir(path)
    raster_list = sorted(glob('*.tif'))  # 读取文件夹下所有tif数据
    result = RasterMosaic(raster_list,
                          outpath=r"D:\_personSelf\_heao\SenseEarth2020-ChangeDetection-master\outdir\masks\test\im2_merge\im2_merge")  # 拼接栅格
    compress(result,
             target_path=r'D:\_personSelf\_heao\SenseEarth2020-ChangeDetection-master\outdir\masks\test\im2_merge\im2_new_raster.tif')  # 压缩栅格
